name: "Coverage CPP"
description: "Calculates the coverage for a module located on a given path"

inputs:
  path:
    required: true
    description: "Path to the module"
  test_directory:
    required: true
    description: "Directory where the tests are located"
  id:
    required: true
    description: "Module identifier, used to name the artifact"
  threshold:
    required: false
    description: "Threshold for the coverage"
    default: "90"
  validate_function_coverage:
    required: false
    description: "Whether to validate function coverage or not"
    default: "true"

runs:
  using: "composite"
  steps:
      - name: Dependencies for local execution
        if: env.ACT # Only run for local execution
        shell: bash
        run: |

          # Update packages
          sudo apt-get update
          sudo apt-get install -y bc

      # Dependencies for testing:
      # - lcov
      - name: Install dependencies
        uses: awalsh128/cache-apt-pkgs-action@v1.4.3
        with:
          packages: lcov
          version: 1.0

      # Generate the coverage files
      - name: Generate coverage files
        shell: bash
        run: |
          BUILD_DIR=$(pwd)/src/build
          cd ${{ inputs.path }}

          # Set arguments
          arguments="--capture "
          # Set working directory
          arguments+="--directory $BUILD_DIR "
          # Set output file
          arguments+="--output-file $BUILD_DIR/coverage.info "
          # # Disable branch coverage
          arguments+="-rc lcov_branch_coverage=0 "
          # Include source files (exclude test files)
          include_files=""
          if [[ ${{ inputs.path }} =~ "shared_modules/utils" ]]; then
            # For utils, include all files except tests directory
            paths="."
            for file in $(find $paths -type f -regextype posix-extended -regex ".*/*\.(hpp|cpp|h|c)")
            do
              file=$(echo $file | sed 's/\.\///g')
              # Exclude test files and generated files
              if [[ ! "$file" =~ "_generated.h" ]] && [[ ! "$file" =~ "/tests/" ]] && [[ ! "$file" =~ "test\.(cpp|hpp|h|c)$" ]]; then
                include_files+="--include=$(pwd)/$file "
              fi
            done
          elif [[ ${{ inputs.path }} =~ "wazuh_modules/inventory_sync" ]]; then
            # For inventory_sync module, include src/ and include/ directories
            paths="src/ include/"
            for file in $(find $paths -type f -regextype posix-extended -regex ".*/*\.(hpp|cpp|h|c)")
            do
              file=$(echo $file | sed 's/\.\///g')
              # Exclude test files and generated files
              if [[ ! "$file" =~ "_generated.h" ]] && [[ ! "$file" =~ "/tests/" ]] && [[ ! "$file" =~ "test\.(cpp|hpp|h|c)$" ]]; then
                include_files+="--include=$(pwd)/$file "
              fi
            done
          else
            # Default case for other modules
            paths="src/ include/"
            for file in $(find $paths -type f -regextype posix-extended -regex ".*/*\.(hpp|cpp|h|c)")
            do
              file=$(echo $file | sed 's/\.\///g')
              if [[ ! "$file" =~ "_generated.h" ]]; then
                include_files+="--include=$(pwd)/$file "
              fi
            done
          fi
          arguments+="$include_files"


          echo "Executing: lcov $arguments"
          echo "Include files: $include_files"
          option=""
          if dpkg --compare-versions $(lcov --version | rev | cut -d ' ' -f1 | rev) ge 2.0-1; then
             option="--ignore-errors unused"
          fi
          lcov $arguments ${option}

      # Generate the HTML coverage report and capture coverage data
      - name: Generate coverage report and extract coverage data
        shell: bash
        run: |
          cd $(pwd)/src/build

          # Generate HTML report and capture the output to a file
          genhtml coverage.info --output-directory coverage_report > genhtml_output.txt 2>&1
          genhtml_output=$(cat genhtml_output.txt)
          echo "$genhtml_output"

          # Extract coverage data from genhtml output using awk for more robust parsing
          linesCoverage=$(echo "$genhtml_output" | awk '/lines.*:/ {gsub(/[^0-9.]/, "", $2); print $2}')
          functionsCoverage=$(echo "$genhtml_output" | awk '/functions.*:/ {gsub(/[^0-9.]/, "", $2); print $2}')

          echo "Lines coverage is: '$linesCoverage' %"
          echo "Functions coverage is: '$functionsCoverage' %"

      # Upload the coverage report as an artifact
      - name: Uploading coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Coverage Report - ${{ inputs.id }}
          path: ./src/build/coverage_report
          retention-days: 1
        continue-on-error: true

      # Check whether the coverage is greater than 90% both for lines and functions
      - name: Validate coverage
        shell: bash
        run: |

          cd $(pwd)/src/build

          # Re-use the genhtml output file for validation
          genhtml_output=$(cat genhtml_output.txt)
          linesCoverage=$(echo "$genhtml_output" | awk '/lines.*:/ {gsub(/[^0-9.]/, "", $2); print $2}')
          echo "Lines coverage is: '$linesCoverage' %"
          if ! (( $(echo "$linesCoverage > ${{ inputs.threshold }}" | bc -l) )); then
            echo "----------------------------------------"
            echo "FAILED: Lines coverage is lower than ${{ inputs.threshold }}%"
            echo "----------------------------------------"
            exit 1
          else
            echo "------------------------------------------"
            echo "PASSED: Lines coverage is greater than ${{ inputs.threshold }}%"
            echo "------------------------------------------"
          fi

          # Check if functions coverage is greater than the threadhold (if enabled)
          if [[ "${{ inputs.validate_function_coverage }}" == "true" ]]; then
            functionsCoverage=$(echo "$genhtml_output" | awk '/functions.*:/ {gsub(/[^0-9.]/, "", $2); print $2}')
            echo "Functions coverage is: '$functionsCoverage' %"
            if ! (( $(echo "$functionsCoverage > ${{ inputs.threshold }}" | bc -l) )); then
              echo "---------------------------------------------"
              echo "FAILED: Functions coverage is lower than ${{ inputs.threshold }}%"
              echo "--------------------------------------------"
              exit 1
            else
              echo "----------------------------------------------"
              echo "PASSED: Functions coverage is greater than ${{ inputs.threshold }}%"
              echo "----------------------------------------------"
            fi
          else
            echo "----------------------------------------------"
            echo "SKIPPED: Function coverage validation is disabled"
            echo "----------------------------------------------"
          fi
